name: Terraform CI/CD Pipeline with Static and Dynamic Analysis

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - '**'

permissions:
  id-token: write        # Required for OIDC (if using OIDC)
  contents: read         # Required for actions/checkout

jobs:
  # Preliminary Job to Check Commit Messages
  set_commit_flags:
    runs-on: ubuntu-latest
    outputs:
      has_si_ci_cd: ${{ steps.check_commit_messages.outputs.has_si_ci_cd }}
      has_merge: ${{ steps.check_commit_messages.outputs.has_merge }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Check Commit Messages
        id: check_commit_messages
        run: |
          # Check for 'merge' in the latest commit message
          if git log -1 --pretty=%B | grep -iq 'merge'; then
            echo "has_merge=true" >> $GITHUB_ENV
          else
            echo "has_merge=false" >> $GITHUB_ENV
          fi

  # Dynamic Analysis and Deployment Job
  dynamic_analysis:
    name: 'Dynamic Analysis and Deployment'
    runs-on: ubuntu-latest
    needs: set_commit_flags
    if: |
      startsWith(github.ref, 'refs/heads/main') &&
      env.has_merge == 'true'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init -backend-config=backend.tfvars

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=plan.out

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: plan.out

      - name: Download Terraform Plan (For Dynamic Analysis)
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan
          path: .

      - name: Run Dynamic Analysis on Terraform Plan
        run: |
          # Example: Check for specific changes or conflicts in the plan
          terraform show -json plan.out > plan.json
          # Custom script to analyze plan.json for conflicts
          python scripts/analyze_plan.py plan.json

      - name: Run Terratest (Optional)
        run: |
          cd tests
          go test -v

      - name: Terraform Apply
        run: terraform plan -auto-approve plan.out
