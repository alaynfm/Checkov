#https://spacelift.io/blog/infrastructure-as-code-with-github-actions

name: Static Analysis Pipeline

on:
  push:
    branches-ignore:
      - main

permissions:
  contents: write     

jobs:
  set_commit_flags:
    name: 'Set Commit Flags'
    runs-on: ubuntu-latest

    outputs:
      should_run: ${{ steps.check_commit_message.outputs.should_run }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Check Commit Message
        id: check_commit_message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Commit Message: $COMMIT_MESSAGE"
          if echo "$COMMIT_MESSAGE" | grep -iq "si ci"; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  tflint:
    runs-on: ubuntu-latest
    needs: set_commit_flags

    steps:
    - uses: actions/checkout@v4
      name: Checkout source code

    - uses: actions/cache@v4
      name: Cache plugin dir
      with:
        path: ~/.tflint.d/plugins
        key: ubuntu-latest-tflint-${{ hashFiles('.tflint.hcl') }}

    - uses: terraform-linters/setup-tflint@v4
      name: Setup TFLint
      with:
        tflint_version: v0.52.0

    - name: Show version
      run: tflint --version

    - name: Init TFLint
      run: tflint --init
      env:
        # https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/plugins.md#avoiding-rate-limiting
        GITHUB_TOKEN: ${{ github.token }}

    - name: Run TFLint
      run: tflint -f compact --chdir=infra/ --recursive > tflint.txt 2>&1
      continue-on-error: true 

    - name: Add TFLint Commit Comment
      run: |
        if [ -s tflint.txt ]; then
          file_content=$(cat tflint.txt)
          # Escape markdown special characters without adding backticks
          escaped_content=$(echo "$file_content" | sed 's/\\/\\\\/g; s/\*/\\*/g; s/_/\\_/g; s/{/\\{/g; s/}/\\}/g; s/\[/\\[/g; s/\]/\\]/g; s/(/\\(/g; s/)/\\)/g; s/#/\\#/g; s/+/\\+/g; s/-/\\-/g; s/!/\\!/g')
          jq -nc --arg body "$escaped_content" '{"body": $body}' | \
            curl -sL -X POST -d @- \
              -H "Content-Type: application/json" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/$GITHUB_REPOSITORY/commits/$GITHUB_SHA/comments"
          echo "TFLint found issues."
          exit 2
        else
          echo "No TFLint issues found."
        fi

  static_analysis_Checkov:
    name: 'Checkov Policies'
    runs-on: ubuntu-latest
    needs: tflint

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Checkov PRISMA Policies
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infra/
          framework: terraform
          config_file: aws/CKV_LIST.yaml
          output_format: csv
          output_file_path: .
        continue-on-error: true

      - name: Run Checkov CUSTOM Policies
        id: checkov_custom
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infra/
          framework: terraform
          external_checks_dirs: aws/custom_rules
          config_file: aws/CKV_CUSTOM_LIST.yaml
          output_format: csv
          output_file_path: .
        continue-on-error: true

      - name: Run Checkov GREEN IT Policies
        id: checkov_greenit
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infra/
          framework: terraform
          external_checks_dirs: aws/custom_rules
          config_file: aws/CKV_GREEN_LIST.yaml
          output_format: csv
          output_file_path: .
        continue-on-error: true

      - name: Upload Checkov Reports
        uses: actions/upload-artifact@v3
        with:
          name: all-reports
          path: |
            *.csv
            failed_*.txt

      - name: Run Python Script
        run: |
          python3 .github/staticResults.py  # Ensure your script is named script.py and located in the root directory
      
      - name: Add commit comment
        run: |
          file_content=$(cat failed_CKV_Detailed.txt)
          # Escape markdown special characters without adding backticks
          escaped_content=$(echo "$file_content" | sed 's/\\/\\\\/g; s/\*/\\*/g; s/_/\\_/g; s/{/\\{/g; s/}/\\}/g; s/\[/\\[/g; s/\]/\\]/g; s/(/\\(/g; s/)/\\)/g; s/#/\\#/g; s/+/\\+/g; s/-/\\-/g; s/!/\\!/g')
          jq -nc --arg body "$escaped_content" '{"body": $body}' | \
          curl -sL -X POST -d @- \
            -H "Content-Type: application/json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/commits/$GITHUB_SHA/comments"

  tfsec:
    name: 'Tfsec Analysis'
    runs-on: ubuntu-latest
    needs: tflint  # Ensures Tfsec runs after TFLint

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Tfsec
        run: |
          # Install Tfsec using the official installation script
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
          sudo mv tfsec /usr/local/bin/
        # Alternatively, you can specify a version:
        # run: |
        #   wget https://github.com/aquasecurity/tfsec/releases/download/v1.25.0/tfsec-linux-amd64
        #   chmod +x tfsec-linux-amd64
        #   sudo mv tfsec-linux-amd64 /usr/local/bin/tfsec

      - name: Run Tfsec
        run: tfsec infra/ --format compact --out tfsec.txt 2>&1
        continue-on-error: true  # Allows the job to continue even if Tfsec finds issues

      - name: Add Tfsec Commit Comment
        run: |
          if [ -s tfsec.txt ]; then
            file_content=$(cat tfsec.txt)
            # Escape markdown special characters to prevent formatting issues
            escaped_content=$(echo "$file_content" | sed 's/\\/\\\\/g; s/\*/\\*/g; s/_/\\_/g; s/{/\\{/g; s/}/\\}/g; s/\[/\\[/g; s/\]/\\]/g; s/(/\\(/g; s/)/\\)/g; s/#/\\#/g; s/+/\\+/g; s/-/\\-/g; s/!/\\!/g')
            # Create JSON payload
            jq -nc --arg body "$escaped_content" '{"body": $body}' > payload.json
            # Post the comment using GitHub API
            curl -sL -X POST -d @payload.json \
              -H "Content-Type: application/json" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/comments"
            echo "Tfsec found issues."
            exit 2  # Optionally, fail the job after commenting
          else
            echo "No Tfsec issues found."
          fi


      
  



